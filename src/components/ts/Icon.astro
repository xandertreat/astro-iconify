---
// Written by Xander Treat
// Types
import type { IconifyAttributes, IconifyAttributesKeys } from "../../types";
interface Props extends IconifyAttributes {};

// Build base API fetch
const { icon, ...attrs } = Astro.props;
const [iconCollection, collectionIcon] = icon.split(":");

const iconifyApiRequest = new URL(
  `https://api.iconify.design/${iconCollection}/${collectionIcon}.svg`,
);

// Add query parameters if needed
Object.entries(Astro.props)
  .filter(
    ([k, v]) =>
      v !== undefined && v !== null && k as keyof IconifyAttributesKeys,
  )
  .forEach(([k, v]) => iconifyApiRequest.searchParams.append(k, String(v)));

// fallback
let svgAttrs: any = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "1em",
  height: "1em",
  viewBox: "0 0 24 24",
};
let iconifyIcon : string = "";

try {
  const response = await fetch(iconifyApiRequest);
  if (response.ok) {
    const html = await response.text(); // This is an HTML document response
    let htmlLines = html.split("><").slice(0, -1); // Get SVG attributes + everything inside the SVG
    const svgHtml = htmlLines.shift() || ""; // SVG attributes string

    // Map SVG attributes for any given
    Object.entries(svgAttrs).forEach(([k]) => {
      let attrIdx = svgHtml.indexOf(`${k}="`);
      attrIdx = svgHtml.indexOf(`"`, attrIdx) + 1;
      if (attrIdx === -1) return;
      const attrEndIdx = svgHtml.indexOf('"', attrIdx);
      if (attrEndIdx === -1) return;
      svgAttrs[k] = svgHtml.substring(attrIdx, attrEndIdx);
    });
    htmlLines = htmlLines.map((str) => `<${str}>`); // Format HTML elements properly
    iconifyIcon = htmlLines.join("\n"); // Merge into one string
  } else {
    console.error(
      "Iconify API Error:",
      response.status,
      response.statusText,
    );
    console.error("Request: " + iconifyApiRequest);
  }
} catch (error) {
  console.error("Iconify API Error:", error);
}

const iconProps = { ...svgAttrs, ...attrs };
---

<svg
  {...iconProps}
  set:html={iconifyIcon}
/>